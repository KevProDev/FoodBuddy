it works but it's link to a certain url 



// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                  String @id @default(cuid())
  userId              String @map("user_id")
  type                String
  provider            String
  providerAccountId   String @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  meals          Meal[]

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String       @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Meal {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(200)
  description   String      @db.VarChar(500)
  likecount     Int     
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  user_id       String
  user          User        @relation(fields: [user_id], references:[id])
  rest_id       String      @db.VarChar(200)
  rest          Restaurant  @relation(fields: [rest_id], references:[id])

}

model Restaurant {
  id            String    @db.VarChar(200) @unique @id
  name          String    @db.VarChar(255)
  address       String    @db.VarChar(200)
  city          String    @db.VarChar(45)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  users_meals   Meal[]
}

model Profile {
  id            String    @id @default(cuid())
  name          String    
  email         String    @unique
}



DATABASE_URL="mysql://root@127.0.0.1:3309/foodbuddy"
SHADOW_DATABASE_URL="mysql://root@127.0.0.1:3310/foodbuddy"


use node 16.12.0




datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meal {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(200)
  description   String      @db.VarChar(500)
  likecount     Int     
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  user_id       String
  user          User        @relation(fields: [user_id], references:[id])
  rest_id       String      @db.VarChar(200)
  rest          Restaurant  @relation(fields: [rest_id], references:[id])

}

model Restaurant {
  id            String    @db.VarChar(200) @unique @id
  name          String    @db.VarChar(255)
  address       String    @db.VarChar(200)
  city          String    @db.VarChar(45)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  users_meals   Meal[]
}

model Profile {
  id            String    @id @default(cuid())
  name          String    
  email         String    @unique
}


options={{ staleTime: 0, refetchInterval: 1 }}





<div className="absolute top-1/4 text-white w-full text-center">
        <div className="sm:flex-row gap-3 flex flex-col justify-center bg-indigo-50 w-11/12 md:w-2/3 lg:w-1/2 mx-auto p-4 mb-5 text-xl md:border-2 rounded-md sm:rounded-full sm:pt-2 md:shadow-sm border-4 border-yellow-400">
          <input
            className="text-2xl sm:text-xl md:text-xl bg-transparent outline-none text-black placeholder-black border-b-2 border-black mb-2"
            placeholder="Start your search"
            name="term"
            onChange={handleInputChange}
            value={state.term}
            placeholder="Search Restaurant"
          />
          {/* <div className="border-b-2 border-gray-300" /> -*/}
          <input
            id="locationInput"
            className="text-2xl sm:text-xl md:text-xl bg-transparent outline-none text-black placeholder-black border-b-2 border-black mb-4"
            placeholder="Start your search"
            name="location"
            onChange={handleInputChange}
            value={state.location}
            placeholder="City"
          />

          <button
            id="searchbutton"
            className="flex w-full sm:w-auto justify-center items-center py-5 ml-auto h-8 text-white text-l rounded-full bg-blue-600 p-2 cursor-pointer"
            onClick={handleSearch}
          >
            <SearchIcon className="text-white h-5 pr-1" />
          </button>
        </div>
      </div>