// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  users_meals_review   Meal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meal {
  id            String      @id @default(cuid())
  title         String      @db.VarChar(200)
  description   String      @db.VarChar(500)
  like_count    Int?     
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  user_id       String
  user_name     String
  user_image    String
  user          User        @relation(fields: [user_id,user_name], references:[id,name])
  rest_id       String      @db.VarChar(200)
  rest          Restaurant  @relation(fields: [rest_id], references:[id])

  @@index([rest_id,user_id,user_name])

}

model Restaurant {
  id            String    @db.VarChar(200) @unique @id
  name          String?    @db.VarChar(255)
  address       String?    @db.VarChar(200)
  city          String?    @db.VarChar(45)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  users_meals_review   Meal[]
}

model Profile {
  id            String    @id @default(cuid())
  name          String    
  email         String    @unique
}